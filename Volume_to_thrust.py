import pandas as pd
import numpy as np
import re
from matplotlib import pyplot as plt

f_path = "/Users/beelee/PycharmProjects/OblateThrust/csv/"
a_digitale_f = f_path + "a_digitale_data.csv"
s_sp_f = f_path + "s_sp_data.csv"
p_flavicirrata_f = f_path + "p_flavicirrata_data.csv"
a_victoria_f = f_path + "a_victoria_data.csv"
m_cellularia_f = f_path + "m_cellularia_data.csv"
p_gregarium_f = f_path + "p_gregarium_data.csv"

sea_den = 1.024 * np.power(10.0, 6)  # g/m^3, 1.024 g/cm^3 (Colin & Costello, 2001)
sea_vis = np.power(10.0, -6)  # m^2/s


######################################################################
# task 2: build a model that estimates the instantaneous thrust based
# on the opposite value of the instantaneous change of bell volume,
# which we suppose is representative of the instantaneous wake volume
# generated by the relaxation and contraction of the bell
######################################################################
def main():

    # import pre-cleaned up csv files, 1 prolate 1 oblate
    # import pre-cleaned up csv files, 3 oblates
    a_digitale = pd.read_csv(a_digitale_f)
    s_sp = pd.read_csv(s_sp_f)
    p_flavicirrata = pd.read_csv(p_flavicirrata_f)
    # import pre-cleaned up csv files, 3 oblates
    a_victoria = pd.read_csv(a_victoria_f)
    m_cellularia = pd.read_csv(m_cellularia_f)
    p_gregarium = pd.read_csv(p_gregarium_f)
    # group the medusa of interest for easy access
    dfs = [a_digitale, s_sp, p_flavicirrata, a_victoria, m_cellularia, p_gregarium]
    name = ["a_digitale", "s_sp", "p_flavicirrata", "a_victoria", "m_cellularia", "p_gregarium"]

    for df in dfs:
        clean_time(df)
        get_basics(df)
        get_thrust(df)

    dfss = [split_digitale(dfs[0]), split_sp(dfs[1]), split_flavicirrata(dfs[2]),
            split_victoria(dfs[3]), split_cellularia(dfs[4]), split_gregarium(dfs[5])]

    dfs_count = 0
    for dfs in dfss:
        colors = ['goldenrod', 'firebrick', 'forestgreen', 'dodgerblue']
        df_count = 0
        for df in dfs:
            plt.plot(df["st"], df["V"], color=colors[df_count])
            df_count += 1
        plt.title("%s bell volume per cycle" % (name[dfs_count]))
        plt.xlabel("percentage cycle %")
        plt.ylabel("volume m^3")
        plt.tight_layout()
        plt.show()
        dfs_count += 1

    dfs_count = 0
    total_x1 = np.array([])
    total_y1 = np.array([])
    total_x2 = np.array([])
    total_y2 = np.array([])
    for dfs in dfss:
        if dfs_count <= 2:
            for df in dfs:
                total_x1 = np.append(total_x1, df["V"].max() - df["V"].min())
                total_y1 = np.append(total_y1, df["tf"].max())
            dfs_count += 1
        else:
            for df in dfs:
                total_x2 = np.append(total_x2, 3 * (df["V"].max() - df["V"].min()))
                total_y2 = np.append(total_y2, df["tf"].max())
            dfs_count += 1
    plt.scatter(total_x1, total_y1)
    plt.title("effect of ejected fluid volume on prolate max acceleration")
    plt.xlabel("ejected fluid volume")
    plt.ylabel("maximum thrust g*m*s^-2")
    # plt.ylabel("maximum acceleration m/s^-2")
    plt.tight_layout()
    plt.show()
    plt.scatter(total_x2, total_y2)
    plt.title("effect of ejected fluid volume on oblate max acceleration")
    plt.xlabel("ejected fluid volume")
    plt.ylabel("maximum thrust g*m*s^-2")
    # plt.ylabel("maximum acceleration m/s^-2")
    plt.tight_layout()
    plt.show()


######################################################################
# split p_gregarium dataframe into 4 based on volume
# param: df
######################################################################
def split_digitale(df_ref):
    ref_1 = df_ref[3:19].copy()
    ref_1['st'] = np.arange(0, df_ref.at[13, 'st'] + 0.04, df_ref.at[13, 'st'] / 15)
    ref_2 = df_ref[19:33].copy()
    ref_2['st'] = np.arange(0, df_ref.at[13, 'st'] + 0.05, df_ref.at[13, 'st'] / 13)
    ref_3 = df_ref[33:45].copy()
    ref_3['st'] = np.arange(0, df_ref.at[13, 'st'] + 0.05, df_ref.at[13, 'st'] / 11)

    return [ref_1, ref_2, ref_3]


######################################################################
# split s_sp dataframe into 4 based on volume
# param: df
######################################################################
def split_sp(df_ref):
    ref_1 = df_ref[3:13].copy()
    ref_1['st'] = np.arange(0, df_ref.at[9, 'st']+0.05, df_ref.at[9, 'st'] / 9)
    ref_2 = df_ref[13:26].copy()
    ref_2['st'] = np.arange(0, df_ref.at[9, 'st']+0.05, df_ref.at[9, 'st'] / 12)
    ref_3 = df_ref[26:36].copy()
    ref_3['st'] = np.arange(0, df_ref.at[9, 'st']+0.05, df_ref.at[9, 'st'] / 9)
    ref_4 = df_ref[36:45].copy()
    ref_4['st'] = np.arange(0, df_ref.at[9, 'st']+0.05, df_ref.at[9, 'st'] / 8)

    return [ref_1, ref_2, ref_3, ref_4]


######################################################################
# split p_gregarium dataframe into 4 based on volume
# param: df
######################################################################
def split_flavicirrata(df_ref):
    ref_1 = df_ref[5:15].copy()
    ref_1['st'] = np.arange(0, df_ref.at[9, 'st'] + 0.05, df_ref.at[9, 'st'] / 9)
    ref_2 = df_ref[19:30].copy()
    ref_2['st'] = np.arange(0, df_ref.at[9, 'st'] + 0.05, df_ref.at[9, 'st'] / 10)

    return [ref_1, ref_2]


######################################################################
# split m_cellularia dataframe into 4 based on volume
# param: df
######################################################################
def split_victoria(df_ref):
    ref_1 = df_ref[2:11].copy()
    ref_1['st'] = np.arange(0, df_ref.at[7, 'st'] + 0.05, df_ref.at[7, 'st'] / 8)
    ref_2 = df_ref[11:18].copy()
    ref_2['st'] = np.arange(0, df_ref.at[7, 'st'] + 0.05, df_ref.at[7, 'st'] / 6)
    ref_3 = df_ref[18:26].copy()
    ref_3['st'] = np.arange(0, df_ref.at[7, 'st'] + 0.05, df_ref.at[7, 'st'] / 7)
    ref_4 = df_ref[26:32].copy()
    ref_4['st'] = np.arange(0, df_ref.at[7, 'st'] + 0.05, df_ref.at[7, 'st'] / 5)
    return [ref_1, ref_2, ref_3, ref_4]


######################################################################
# split m_cellularia dataframe into 4 based on volume
# param: df
######################################################################
def split_cellularia(df_ref):
    ref_1 = df_ref[4:15].copy()
    ref_1['st'] = np.arange(0, df_ref.at[11, 'st'] + 0.05, df_ref.at[11, 'st'] / 10)
    ref_2 = df_ref[15:27].copy()
    ref_2['st'] = np.arange(0, df_ref.at[11, 'st'] + 0.05, df_ref.at[11, 'st'] / 11)
    ref_3 = df_ref[27:41].copy()
    ref_3['st'] = np.arange(0, df_ref.at[11, 'st'] + 0.05, df_ref.at[11, 'st'] / 13)
    ref_4 = df_ref[41:54].copy()
    ref_4['st'] = np.arange(0, df_ref.at[11, 'st'] + 0.05, df_ref.at[11, 'st'] / 12)
    return [ref_1, ref_2, ref_3, ref_4]


######################################################################
# split p_gregarium dataframe into 4 based on volume
# param: df
######################################################################
def split_gregarium(df_ref):
    ref_1 = df_ref[2:5].copy()
    ref_1['st'] = np.arange(0, df_ref.at[2, 'st'] + 0.05, df_ref.at[2, 'st'] / 2)
    ref_2 = df_ref[5:9].copy()
    ref_2['st'] = np.arange(0, df_ref.at[2, 'st'] + 0.05, df_ref.at[2, 'st'] / 3)
    ref_3 = df_ref[9:13].copy()
    ref_3['st'] = np.arange(0, df_ref.at[2, 'st'] + 0.05, df_ref.at[2, 'st'] / 3)
    ref_4 = df_ref[13:17].copy()
    ref_4['st'] = np.arange(0, df_ref.at[2, 'st'] + 0.05, df_ref.at[2, 'st'] / 3)

    return [ref_1, ref_2, ref_3, ref_4]


######################################################################
# clean up dataframe to show just 1 time reference
# inspect time data in odd columns and determine whether they are reasonably
# equivalent to the column 'st' time reference, and drop the column if so
######################################################################
def clean_time(df_ref):
    to_delete = []
    for column in df_ref.columns:
        index_no = df_ref.columns.get_loc(column)
        if index_no % 2 == 1:
            eq = True
            second_err = False  # assume no more than 2 references in a row are considerably different to the standard time
            for row in df_ref.index:
                if np.absolute(df_ref.iat[row, 0] - round(df_ref.iat[row, index_no], 2)) > 0.02:
                    if second_err:
                        break
                    second_err = True
                else:
                    second_err = False
        else:
            eq = False

        if eq:
            to_delete.append(column)
    if to_delete:
        df_ref.drop(to_delete, axis=1, inplace=True)


######################################################################
# add/adjust instantaneous heights, diameters, and velocities and
# accelerations in the corrected units
######################################################################
def get_basics(df_ref):
    accelerations_o = []  # store instantaneous accelerations in converted units
    velocities = []  # store instantaneous velocities in converted units
    heights = []  # store instantaneous heights
    diameters = []  # store instantaneous diameters

    has_am = False
    for column in df_ref.columns:
        if re.search(r'am', column):
            has_am = True

    for row in df_ref.index:
        if has_am:
            aoc = df_ref.at[row, 'ao'] / 100.0
            df_ref.rename(columns={'ao':'a'})
        else:
            aoc = df_ref.at[row, 'a'] / 100.0
        accelerations_o.append(aoc)
        u = df_ref.at[row, 'v'] / 100.0  # convert velocity unit to m/s
        velocities.append(u)
        d_h = bell_dim(df_ref.at[row, 're'], u, df_ref.at[row, 'f'])  # re: m^2/s / m^2/s, fineness: m/m
        diameters.append(d_h[0])
        heights.append(d_h[1])

    df_ref["a"] = accelerations_o
    df_ref["v"] = velocities
    df_ref["h"] = heights
    df_ref["d"] = diameters


######################################################################
# find the modeled thrust force based on the modeled acceleration
# derived by the basic measurements
######################################################################
def get_thrust(df_ref):
    volumes = []  # store instantaneous volumes
    # masses = []  # store instantaneous masses
    # drags = []  # store instantaneous drags
    # net_forces = []  # store instantaneous net_forces
    thrusts = []  # store instantaneous thrusts
    dVs = []

    for row in df_ref.index:
        v = df_ref.at[row, 'v']
        r = df_ref.at[row, 're']
        h = df_ref.at[row, 'h']
        d = df_ref.at[row, 'd']
        a = df_ref.at[row, 'a']
        volumes.append(bell_vol(h, d))
        thrusts.append(tf_ao(h, d, a, r, v))

    df_ref["V"] = volumes
    df_ref["tf"] = thrusts

    for row in (list(range(len(df_ref.index) - 1))):
        t = df_ref.at[row, 'st']
        v1 = df_ref.at[row, 'V']
        v2 = df_ref.at[row+1, 'V']
        dVs.append((v2-v1)/t)

    dVs.append(0)
    df_ref["dV"] = dVs


######################################################################
# get bell diameter (m) and height (m)
# param: Re, velocity(m/s), fineness
######################################################################
def bell_dim(re_ref, u_ref, f_ref):
    # bell diameter = Re * sea kinematic viscosity / swimming velocity
    # diameter: m = (m^2/s / m^2/s) (m^2/s) / m/s
    d_b = 1.0 * re_ref * sea_vis / np.absolute(u_ref)
    # bell height = fineness * bell diameter
    # height: m = (m/m) * m
    h_b = d_b * f_ref
    return [d_b, h_b]


######################################################################
# get bell volume (m^3)
# param: bell height(m), bell diameter(m)
######################################################################
def bell_vol(h_ref, d_ref):
    # bell radius = bell diameter / 2
    # radius: m
    radius = d_ref / 2
    # bell volume = 2/3 * bell height * pi * radius^2
    # volume: m^3 = m * m^2
    volume = 2/3 * h_ref * np.pi * np.power(radius, 2)
    return volume


######################################################################
# get effective mass (g)
# param: bell height(m), bell diameter(m)
######################################################################
def bell_mas(h_ref, d_ref):
    volume = bell_vol(h_ref, d_ref)
    # mass coefficient = bell diameter / 2 * bell height^(1.4)
    # coefficient = m/m
    coe = np.power(d_ref / 2 / h_ref, 1.4)
    # effective mass = sea density * bell volume * (1 + mass coefficient)
    # mass: g = g/m^3 * m^3
    mass = sea_den * volume * (1 + coe)
    return mass


######################################################################
# get net force (g * m / s^2)
# param: bell height(m), bell diameter(m), modeled acceleration(m/s^2)
######################################################################
def nf_ao(h_ref, d_ref, ao_ref):
    mass = bell_mas(h_ref, d_ref)
    # force = mass * acceleration
    # force: g * m / s^2 = g * (m / s^2)
    net_force = mass * ao_ref
    return net_force


######################################################################
# get drag (g * m / s^2)
# param: Re, bell height(m), bell diameter(m), swimming velocity (m/s)
######################################################################
def drg(re_ref, h_ref, d_ref, u_ref):
    if re_ref > 500:
        return 0
    elif re_ref < 1:
        # drag coefficient = 24 / re
        # coefficient:
        coe = 24 / re_ref
    else:
        # drag coefficient = 24 / re^0.7
        # coefficient:
        coe = 24 / np.power(re_ref, 0.7)

    # bell surface area = pi * bell height * bell diameter / 4
    # area: m^2 = m * m
    area = np.pi * h_ref * d_ref / 4

    # drag force = sea density * swimming velocity^2 * bell surface area / 2
    # drag: g * m / s^2 = g/m^3 * (m/s)^2 * m^2
    drag = (sea_den * np.power(u_ref, 2) * area * coe) / 2

    return drag


######################################################################
# get thrust (g * m / s^2)
# param: bell height(m), bell diameter(m), acceleration(m/s^2),
#        Re, swimming velocity (m/s)
######################################################################
def tf_ao(h_ref, d_ref, ao_ref, re_ref, u_ref):
    force = nf_ao(h_ref, d_ref, ao_ref)
    drag = drg(re_ref, h_ref, d_ref, u_ref)
    thrust = force + drag
    if thrust < 0:
        return 0
    else:
        return thrust


main()
